
/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package NerdHerd.Command;


import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Lock extends Command{

    private Solenoid SolenoidMain, SolenoidSub;
    private CANJaguar CANJagMain, CANJagSub;
    private Timer Timer;
    
    public Lock(){
        Timer = new Timer();
        Timer.start();
        try{
        CANJagMain = new CANJaguar(7);
        CANJagSub = new CANJaguar(8);
        }catch (Exception e){
            System.out.println(e);
        }
        SolenoidMain = new Solenoid(1);
        SolenoidSub = new Solenoid(2);
        
        
    }
    
    public void execute(){
        SolenoidSub.set(true);
        try{
            CANJagMain.set(1.0);
            CANJagSub.set(1.0);
        
        } catch(Exception e){
                System.out.println(e);
        }
    }

    protected void initialize() {
        if (Timer.get() > .050){
        SolenoidMain.set(true);
        execute();
        }
        
    }

    protected boolean isFinished() {
        return true;
    }

    protected void end() {
    }

    protected void interrupted() {
    }

    
    
}
